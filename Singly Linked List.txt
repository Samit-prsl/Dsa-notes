Implementation :-

class Node {
public :
int data;
Node* next;
}
Node(int data) {
this -> data = data;
this -> next = NULL:
}

Traversing a Linked list :-

Node* temp = head;
while(temp!=NULL)
{
cout<<temp->data;
temp = temp->next;
}

Insertion :-
i) Insert at head :-

void InsertAtHead(Node*&head , int data)
{
Node* temp = new Node(data);
temp->next = head;
head = temp;
}

ii) Insert at tail :-

void InsertAtTail(Node*&tail,int data)
{
Node*temp = new Node(data);
tail->next = temp;
tail = temp;
}

iii) Insert at middle :-

void InsertAtMiddle(int position,int data)
{
Node*temp = head;
Node*prev = NULL;
int count = 1;
while(count<=position)
{
prev = temp;
temp = temp->next;
count++;
}
Node*new_node = new Node(data);
new_node->next = temp;
prev->next = new_node;
}

Deletion :-

i) Deletion at head :-

void DeleteAtHead(Node*&head , int position)
{
Node* temp = head;
head = head->next;
temp->next = NULL;
delete(temp);
}

ii) Deletion at middle or last node :-

void DeleteAtMiddleOrTail(Node*&head ,int position)
{
Node* curr = head;
Node* prev = NULL;
int count = 1;
while(count<position)
{
prev = curr;
curr = curr->next;
count++;
}
prev->next = curr-> next;
curr->next = NULL;
delete curr;
}