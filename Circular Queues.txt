Implementation :-

class CircularQueue
{
public:
int data;
int size;
int front;
int rear;
CircularQueue()
{
size = 1000001;
arr = new int[size];
front = rear = -1;
}
};

1) Enqueue Operation :-

bool Enqueue(int data)
{
if((front==0 && rear=size-1)||(rear == (front-1)%(rear-1))
{
return false;
cout<<"Queue is full";
}
else if((front != 0)&&(rear == size-1))
{
rear = 0;
arr[rear] = data;
}
else if(front == -1)
{
front = rear = 0;
arr[rear] = data;
}
else
{
rear++;
arr[rear] = value;
}
return true;
}

2) Dequeue Operation :-

void Dequeue()
{
if(front == -1)
cout<<"Queue Empty";
else if(front == rear)
{
arr[front]=-1;
front = rear = -1;
}
else if(front == size-1)
{
front = 0;
arr[front]=-1;
}
else
arr[front]=-1 
front++;
}